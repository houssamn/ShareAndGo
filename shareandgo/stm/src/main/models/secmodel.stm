role SYSTEM {
    //System Has Full Access on Everything For Now ...

    Person {
        fullAccess
    }

    Location {
        fullAccess
    }

    Zone {
        fullAccess
    }

    Trip {
        fullAccess
    }

    Complaint {
        fullAccess
    }

}

role USER {
    Person {
        read (firstName), read (lastName), read (username)
            
        read (livingZone) constrainedBy [ caller = self ]

        update (firstName), update (lastName), update (password),
        update (livingZone) constrainedBy [ caller = self ]

        add (asPassenger) constrainedBy [ caller = self and
            not self.asPassenger->includes(target) and 
            not target.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty() 
        ]

        add (complaintFrom) constrainedBy [ target.complaintOwner = caller and not
            (caller.asPassenger->intersection(target.complaintTarget.asPassenger->
            union(target.complaintTarget.asDriver))->union(caller.asDriver->
            intersection(target.complaintTarget.asPassenger)))->asSet()->isEmpty() ]
    }
    
    Zone {
        read
    }

    Location {
        read
    }
    
    Trip {
        read constrainedBy [ not self.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty() ]

        add (passengers) constrainedBy [ target = caller and not self.passengers->includes(target) 
        and self.childLocations->any(v1| not v1.zones->includes(caller.livingZone))->asSet()->isEmpty()]
    }

    Complaint {
        update (complaintOwner) constrainedBy [ value = caller and 
            not self.isCreated
        ]

        update (complaintTarget) constrainedBy [
            self.complaintOwner = caller and
            not self.isCreated and 
            not value.asPassenger->intersection(caller.asPassenger->union(caller.asDriver))->
            union(value.asDriver->intersection(caller.asPassenger))->asSet()->isEmpty()
        ]

        update (text) constrainedBy [
            not self.isCreated and
            self.complaintOwner = caller
        ]

        update (isCreated)

        create 
    }
}


role PREMIUM_USER {
    Person {
        read (firstName), read (lastName), read (username)
            
        read (livingZone) constrainedBy [ caller = self ]

        update (firstName), update (lastName), update (password),
        update (livingZone) constrainedBy [ caller = self ]

        add (asPassenger) constrainedBy [ caller = self and
            not self.asPassenger->includes(target) and 
            not target.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty() 
        ]

        add (complaintFrom) constrainedBy [ target.complaintOwner = caller and not
            (caller.asPassenger->intersection(target.complaintTarget.asPassenger->
            union(target.complaintTarget.asDriver))->union(caller.asDriver->
            intersection(target.complaintTarget.asPassenger)))->asSet()->isEmpty() ]
    }
    
    Zone {
        read
    }

    Location {
        read
    }
    
    Trip {
        read constrainedBy [ not self.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty() 
                             or not self.childLocations->any(v2|v2.zones->any(zn|not (zn.locations->intersection(caller.livingZone.locations)->asSet()->isEmpty()))->asSet()->isEmpty())->asSet()->isEmpty()     ]

        add (passengers) constrainedBy [ target = caller and not self.passengers->includes(target) 
        and not self.childLocations->any(k|k.zones->includes(caller.livingZone))->asSet()->isEmpty() ]

        create // To Be Added Later


    }

    Complaint {
        update (complaintOwner) constrainedBy [ value = caller and 
            not self.isCreated
        ]

        update (complaintTarget) constrainedBy [
            self.complaintOwner = caller and
            not self.isCreated and 
            not value.asPassenger->intersection(caller.asPassenger->union(caller.asDriver))->union(value.asDriver->intersection(caller.asPassenger))->asSet()->isEmpty()
        ]

        update (text) constrainedBy [
            not self.isCreated and
            self.complaintOwner = caller
        ]

        update (isCreated)

        create 
    }
}


role ADMIN {
    Person {
        read (complaintAbout)
    }

    Location {
        create

        read 

        update(name), update(x), update(y)

        //add the zone only if the location is not already in that zone
        add(zones) constrainedBy [ self.zones->excludes(target) ]
    }

    Zone {
        //TODO is an admin allowed to change a person's living zone?
        create

        read 
        
        update (zname)

        //add the location only if it is not already in the zone
        add(locations) constrainedBy [ self.locations->excludes(target) ]
    }

    Trip {
        read
    }
}