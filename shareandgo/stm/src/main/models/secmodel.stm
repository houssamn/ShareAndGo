role SYSTEM {
    //System Has Full Access on Everything For Now ...
    Person {
        fullAccess
    }

    Location {
        fullAccess
    }

    Zone {
        fullAccess
    }

    Trip {
        fullAccess
    }

    Complaint {
        fullAccess
    }

}

role USER {
    Person {
        read (firstName), read (lastName), read (username)
            
        read (livingZone), read (myRole) , read(asPassenger), read(asDriver), read(password) constrainedBy [ caller = self ]

        update (firstName), update (lastName), update (password),
        update (livingZone) constrainedBy [ caller = self ]


        //Joining A Trip iff:
        //  -Adding himself
        //  -Not Already Part of the trip
        //  -All Locations belong to User's Living Zone
        //  -No More than 3 passengers already in trip
        add (asPassenger) constrainedBy [ caller = self and
            not self.asPassenger->includes(target) and 
            not target.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty() and
            target.childLocations->size() < 4
        ]


        //Issue a complaint iff:
        //  -Owner is complaining as himself
        //  -Shared A Trip with some person  (as passenger or as driver)
        add (complaintFrom) constrainedBy [ target.complaintOwner = caller and not
            (caller.asPassenger->intersection(target.complaintTarget.asPassenger->
            union(target.complaintTarget.asDriver))->union(caller.asDriver->
            intersection(target.complaintTarget.asPassenger)))->asSet()->isEmpty() ]
    }
    
    //Read All Zone Info
    Zone {
        read
    }

    //Read All Location Info
    Location {
        read
    }
    


    Trip {

        //Read Trips iff:
        // -All Locations belong to user's living zone
        //self = null used as a patch where in some cases the selected trip value is equal to null , 
        //this patch is used in order not to crash when a user tries to read a null value (as a result of some filter)
        read constrainedBy [(self = null) or  
                not(self.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty())]
        
        //Add himself as passenger:
        //  -adding himself
        //  -not already in trip
        //  -alll locations belong to user's livin zone
        //  -no more than 3 passengers already
        add (passengers) constrainedBy [ target = caller and not self.passengers->includes(target) 
        and self.childLocations->any(v1| not v1.zones->includes(caller.livingZone))->asSet()->isEmpty()
        and self.childLocations->size() < 4 ]
    }

    Complaint {
        update (isCreated)

        update (complaintOwner) constrainedBy [ value = caller and 
            not self.isCreated
        ]

        //owner of complaint
        //Shared A Trip with the person
        update (complaintTarget) constrainedBy [
            self.complaintOwner = caller and
            not self.isCreated and 
            not value.asPassenger->intersection(caller.asPassenger->union(caller.asDriver))->
            union(value.asDriver->intersection(caller.asPassenger))->asSet()->isEmpty()
        ]

        update (text) constrainedBy [
            not self.isCreated and
            self.complaintOwner = caller
        ]
 
        update (associatedTrip) constrainedBy [not self.isCreated and self.complaintOwner = caller]

        create 

        //Delete the complaint if it is not finalized (i.e. user aborted create complaint action)
        delete constrainedBy [self.complaintOwner = caller and not self.isCreated]
    }
}


role PREMIUM_USER { 
    Person {
        read (firstName), read (lastName), read (username)
            
        read (livingZone), read(myRole), read(asPassenger), read(asDriver) constrainedBy [ caller = self ]

        update (firstName), update (lastName), update (password),
        update (livingZone) constrainedBy [ caller = self ]

        add (asPassenger) constrainedBy [ caller = self and
            not (target.driver = caller) and
            not self.asPassenger->includes(target) and 
            not target.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty()
            and target.childLocations->size() < 4
        ]

        add (complaintFrom) constrainedBy [ target.complaintOwner = caller and not
            (caller.asPassenger->intersection(target.complaintTarget.asPassenger->
            union(target.complaintTarget.asDriver))->union(caller.asDriver->
            intersection(target.complaintTarget.asPassenger)))->asSet()->isEmpty() ]
    
        add(asDriver) constrainedBy [ target.driver = caller and not(target.isCreated) ]

    }
    
    Zone {
        read
    }

    Location {
        read
    }
    
    Trip {
        //Read if one of the locations belongs to the user's living zone    
        // or if he has visited this location before
        // Or the person is creating the trip right now
        //self = null used as a patch for wierd exceptions with verification on null values
        read constrainedBy [ (self = null) or (not (self.childLocations->any(v1| v1.zones->includes(caller.livingZone))->asSet()->isEmpty())
                        or not(self.childLocations->any(v1|not(v1.zones.locations->intersection(caller.livingZone.locations)->isEmpty()))->asSet()->isEmpty())
                       or (self.driver = caller)) ]
                     //      or not (self.childLocations->any(v2|v2.zones->any(zn|not (zn.locations->intersection(caller.livingZone.locations)->asSet()->isEmpty()))->asSet()->isEmpty())->asSet()->isEmpty() )    ]             

        
        add (passengers) constrainedBy [ target = caller and not self.passengers->includes(target) 
        and not ( self.driver = caller)
        and not self.childLocations->any(k|k.zones->includes(caller.livingZone))->asSet()->isEmpty() 
        and self.childLocations->size() < 4 ]

        create 

        add(childLocations) constrainedBy [not(self.isCreated) and (self.driver = caller)  
                                and not(self.childLocations->includes(target)) 
                                and (target.zones->includes(caller.livingZone) 
                                or caller.asPassenger.childLocations->includes(target) ) ]  



        remove(childLocations) constrainedBy [not(self.isCreated) and self.driver = caller]

        update(driver) constrainedBy [not(self.isCreated) and value = caller ]
        
        update(price) constrainedBy [not(self.isCreated) and self.driver = caller ]

        update(isCreated) 

        update(startDate) constrainedBy [not(self.isCreated) and self.driver = caller]


        //Allow the User to delete the trip if it is still not published (i.e. aborted create Trip mode)
        delete constrainedBy [not(self.isCreated) and self.driver = caller]

    }

    Complaint {
        update (complaintOwner) constrainedBy [ value = caller and 
            not self.isCreated
        ]
        
        //Share a ride constraint
        update (complaintTarget) constrainedBy [
            self.complaintOwner = caller and
            not self.isCreated and 
            not value.asPassenger->intersection(caller.asPassenger->union(caller.asDriver))->union(value.asDriver->intersection(caller.asPassenger))->asSet()->isEmpty()
        ]

        update (text) constrainedBy [
            not self.isCreated and
            self.complaintOwner = caller
        ]

        update (isCreated)

        update (associatedTrip) constrainedBy [not self.isCreated and self.complaintOwner = caller]

        create 


        delete constrainedBy [self.complaintOwner = caller and not self.isCreated]
       
    }
}


//A Banned User's Will Not Be Able To Do Anything
role BANNED_USER {
   Person {
        read(myRole) constrainedBy [caller  = self]
    }
}

role ADMIN {
    Person {
        create

        read


        //First 3 lines : Banning a user
        //4th-5th lines : Prmoting A UserCondition
        //6th line, make sure user has normal priveleges and not already banned
        update(myRole) constrainedBy [ ( value = Role::BANNED_USER and                  
            ( (self.myRole = Role::USER and self.complaintAbout->size() > 2) or
              (self.myRole = Role::PREMIUM_USER and self.complaintAbout->size() > 4) ))       
            or ((value = Role::PREMIUM_USER)  and                               
             ( self.asDriver->union(self.asPassenger)->size() - self.complaintAbout.associatedTrip->size()  >= 4  ) 
             and (self.myRole = Role::USER)  )]
    }

    Location {
        create

        read 

        update(name), update(x), update(y), update(zones)

        //add the zone only if the location is not already in that zone
        add(zones) constrainedBy [ self.zones->excludes(target) ]

        delete
    }

    Zone {
        //TODO is an admin allowed to change a person's living zone?
        create

        read 
        
        update (zname), update(locations)

        //add the location only if it is not already in the zone
        add(locations) constrainedBy [ self.locations->excludes(target) ]

        delete
    }

    Trip {
        read
    }

    Complaint {
       read
    }
}   